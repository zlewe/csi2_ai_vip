/**
 * @file csi2_scoreboard.sv
 * @brief UVM Scoreboard for CSI-2 Protocol Verification.
 *
 * This scoreboard compares actual CSI-2 packets observed from the DUT with
 * expected CSI-2 packets generated by a reference model. It uses UVM TLM FIFOs
 * to receive transactions from the DUT monitor and the reference model,
 * then performs a deep comparison of the packets.
 */

// Import UVM package
import uvm_pkg::*;
`include "uvm_macros.svh"

// Import the package where csi2_packet is defined.
// This assumes csi2_packet is a uvm_sequence_item or uvm_transaction
// defined in 'csi2_pkg'. Adjust the import statement if the package or
// file structure is different.
import csi2_pkg::*;

class csi2_scoreboard extends uvm_scoreboard;

  // UVM Factory Registration Macro
  `uvm_component_utils(csi2_scoreboard)

  // TLM FIFOs to receive packets from the DUT monitor and Reference Model
  // These FIFOs will be connected in the environment to the corresponding
  // analysis ports of the monitor and reference model.
  uvm_tlm_fifo #(csi2_packet) dut_fifo;
  uvm_tlm_fifo #(csi2_packet) ref_fifo;

  // Handles for packets retrieved from FIFOs for comparison
  csi2_packet dut_packet;
  csi2_packet ref_packet;

  // Constructor: Initializes the scoreboard instance.
  function new (string name, uvm_component parent);
    super.new(name, parent);
  endfunction : new

  // build_phase: Creates the TLM FIFOs and transaction handles.
  function void build_phase(uvm_phase phase);
    super.build_phase(phase);

    // Create the TLM FIFOs for DUT and reference model packets.
    // The arguments are: instance name, parent component.
    dut_fifo = new("dut_fifo", this);
    ref_fifo = new("ref_fifo", this);

    // Create initial packet handles. These will be overwritten by get()
    // but it's good practice to ensure they are valid objects.
    dut_packet = csi2_packet::type_id::create("dut_packet");
    ref_packet = csi2_packet::type_id::create("ref_packet");

    `uvm_info(get_full_name(), "Scoreboard built successfully.", UVM_LOW)
  endfunction : build_phase

  // run_phase: Contains the main comparison logic. It continuously
  // retrieves packets from both FIFOs and performs a comparison.
  task run_phase(uvm_phase phase);
    super.run_phase(phase);

    forever begin
      // Retrieve a packet from the DUT FIFO. This call will block
      // until a packet is available in the 'dut_fifo'.
      dut_fifo.get(dut_packet);
      `uvm_info(get_full_name(), $sformatf("DUT Packet received:\n%s", dut_packet.sprint()), UVM_HIGH)

      // Retrieve a packet from the Reference Model FIFO. This call will block
      // until a packet is available in the 'ref_fifo'.
      ref_fifo.get(ref_packet);
      `uvm_info(get_full_name(), $sformatf("REF Packet received:\n%s", ref_packet.sprint()), UVM_HIGH)

      // Perform a deep comparison of the two packets.
      // The 'compare' method relies on the do_compare implementation within csi2_packet.
      if (dut_packet.compare(ref_packet)) begin
        `uvm_info(get_full_name(), "Packet Match! DUT and Reference packets are identical.", UVM_LOW)
      end else begin
        // Log an error if a mismatch is found and report the differences using sprint().
        `uvm_error(get_full_name(), $sformatf("PACKET MISMATCH DETECTED!\n"
                                              "  DUT Packet:\n%s\n"
                                              "  REF Packet:\n%s",
                                              dut_packet.sprint(), ref_packet.sprint()))
      end
    end
  endtask : run_phase

endclass : csi2_scoreboard
